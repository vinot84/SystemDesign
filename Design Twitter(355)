class Twitter {

    private static int timestamp =0;
    private Map<Integer, User> userMap;
    private class Tweet{
        
        public int id;
        public int time;
        public Tweet next;
        
        public Tweet(int id){
            this.id = id;
            time = timestamp++;
            next = null;
        }
    }
    
    public class User{
        
        public int userId;
        public Set<Integer> followersId;
        public Tweet tweetHead;
        
        public User(int userId){
            this.userId = userId;
            followersId = new HashSet<Integer>();
            follow(userId);
            tweetHead = null;
        }
        
        public void follow(int userId){
            followersId.add(userId);
        }
        
        public void unFollow(int userId){
            followersId.remove(userId);
        }
        
        public void post(int tweetId){
            Tweet t = new Tweet(tweetId);
            t.next = tweetHead;
            tweetHead = t;
        }
    }
    
    public Twitter() {
        userMap = new HashMap<Integer, User>();
    }
    
    public void postTweet(int userId, int tweetId) {
        
        if(!userMap.containsKey(userId)){
            User user = new User(userId);
            userMap.put(userId, user);
        }
        userMap.get(userId).post(tweetId);
    }
    
    public List<Integer> getNewsFeed(int userId) {
        
        List<Integer> result = new LinkedList<>();
        
        if(!userMap.containsKey(userId)) return result;
            
        Set<Integer> userSet = userMap.get(userId).followersId;
        PriorityQueue<Tweet> queue = new PriorityQueue<Tweet>(userSet.size(), (a,b)->(b.time - a.time));
        
        for(int users: userSet){
            Tweet tweet = userMap.get(users).tweetHead;
            if(tweet!=null)
                queue.add(tweet);
        }
        
        int n=0;
        while(!queue.isEmpty() && n<10){
            Tweet tweet = queue.poll();
            result.add(tweet.id);
            n++;
            if(tweet.next!=null){
                queue.add(tweet.next);
            }
        }
        return result;
    }
    
    public void follow(int followerId, int followeeId) {
        
        if(!userMap.containsKey(followerId)){
            User user = new User(followerId);
            userMap.put(followerId, user);
            
        }
        if(!userMap.containsKey(followeeId)){
            User user = new User(followeeId);
            userMap.put(followeeId, user);
            
        }
        
        userMap.get(followerId).follow(followeeId);
    }
    
    public void unfollow(int followerId, int followeeId) {
        
        if(!userMap.containsKey(followerId) || followerId == followeeId){
            return;
        }
       userMap.get(followerId).unFollow(followeeId);
    }
}

/**
 * Your Twitter object will be instantiated and called as such:
 * Twitter obj = new Twitter();
 * obj.postTweet(userId,tweetId);
 * List<Integer> param_2 = obj.getNewsFeed(userId);
 * obj.follow(followerId,followeeId);
 * obj.unfollow(followerId,followeeId);
 */
